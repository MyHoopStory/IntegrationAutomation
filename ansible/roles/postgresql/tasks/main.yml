---
- name: Debug connection and sudo
  ansible.builtin.debug:
    msg: 
      - "User: {{ ansible_user }}"
      - "Python: {{ ansible_python.executable }}"
      - "Become Method: {{ ansible_become_method | default('sudo') }}"

- name: Test sudo access
  ansible.builtin.command: whoami
  become: true
  register: sudo_test
  changed_when: false

- name: Wait for target connection to become available
  ansible.builtin.wait_for_connection:
    timeout: 300
    sleep: 5
    delay: 10

- name: Ensure Python is available
  ansible.builtin.raw: which python3 || apt-get -y install python3
  become: true
  changed_when: false

- name: Gather facts after ensuring Python
  ansible.builtin.setup:
  become: true

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600
  become: true
  register: apt_update
  retries: 5
  delay: 30
  until: apt_update is success

- name: Install PostgreSQL and dependencies
  ansible.builtin.apt:
    name: 
      - "postgresql-{{ postgresql_version }}"
      - postgresql-contrib
      - python3-psycopg2
    state: present

- name: Ensure PostgreSQL is started and enabled
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: yes

- name: Configure PostgreSQL to listen on all addresses
  ansible.builtin.lineinfile:
    path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
    regexp: '^#?listen_addresses\s*='
    line: "listen_addresses = '*'"
  notify: restart postgresql

- name: Configure client authentication
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
    mode: '0640'
    owner: postgres
    group: postgres
  notify: restart postgresql

- name: Create PostgreSQL user
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgresql_user }}"
    password: "{{ postgresql_password }}"
    role_attr_flags: LOGIN,CREATEDB
    state: present

- name: Create PostgreSQL database
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ postgresql_db }}"
    owner: "{{ postgresql_user }}"
    state: present