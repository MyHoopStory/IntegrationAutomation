---
- name: Verify k3s server configuration
  ansible.builtin.assert:
    that:
      - k3s_server is defined
      - k3s_control_plane is defined
      - group_name_master is defined
    fail_msg: "Required k3s server variables are not defined"

- name: Check if port 6443 is in use
  ansible.builtin.wait_for:
    port: 6443
    state: stopped
    timeout: 5
  when: inventory_hostname != groups[group_name_master][0]
  ignore_errors: true
  register: port_check

- name: Fail if port is in use
  ansible.builtin.fail:
    msg: "Port 6443 is already in use on {{ inventory_hostname }}"
  when: 
    - inventory_hostname != groups[group_name_master][0]
    - port_check.state is defined
    - port_check.state != "stopped"

- name: Stop k3s-init
  ansible.builtin.systemd:
    name: k3s-init
    state: stopped
  failed_when: false

# k3s-init won't work if the port is already in use
- name: Stop k3s
  ansible.builtin.systemd:
    name: k3s
    state: stopped
  become: true
  failed_when: false

- name: Clean previous runs of k3s-init # noqa command-instead-of-module
  # The systemd module does not support "reset-failed", so we need to resort to command.
  ansible.builtin.command: systemctl reset-failed k3s-init
  become: true
  failed_when: false
  changed_when: false

- name: Deploy K3s http_proxy conf
  ansible.builtin.include_tasks: http_proxy.yml
  when: proxy_env is defined

- name: Deploy vip manifest
  ansible.builtin.include_tasks: vip.yml
- name: Deploy metallb manifest
  ansible.builtin.include_tasks: metallb.yml
  tags: metallb
  when: 
    - kube_vip_lb_ip_range is not defined 
    - (cilium_bgp is not defined or not cilium_bgp) or (cilium_iface is not defined)

- name: Deploy kube-vip manifest
  ansible.builtin.include_tasks: kube-vip.yml
  tags: kubevip
  when: kube_vip_lb_ip_range is defined

- name: Download k3s binary
  ansible.builtin.get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s
    dest: /usr/local/bin/k3s
    mode: "0755"
    owner: root
    group: root
  when: not ansible_check_mode
  become: true

- name: Verify k3s binary
  ansible.builtin.stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Fail if k3s binary not found
  ansible.builtin.fail:
    msg: "k3s binary not found at /usr/local/bin/k3s"
  when: not k3s_binary.stat.exists

- name: Init cluster inside the transient k3s-init service
  ansible.builtin.command:
    cmd: systemd-run -p RestartSec=2 -p Restart=on-failure --unit=k3s-init k3s server {{ server_init_args }}
    creates: "{{ systemd_dir }}/k3s-init.service"

- name: Wait for API server to be available
  ansible.builtin.wait_for:
    host: "{{ apiserver_endpoint }}"
    port: 6443
    timeout: 300
  when: inventory_hostname != groups[group_name_master][0]

- name: Wait for control plane stabilization
  ansible.builtin.pause:
    seconds: 30
  when: inventory_hostname != groups[group_name_master][0]

- name: Copy K3s service file
  register: k3s_service
  ansible.builtin.template:
    src: k3s.service.j2
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: "0644"

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true
  register: k3s_service_result
  ignore_errors: true

- name: Wait for control plane nodes to be ready
  ansible.builtin.pause:
    seconds: 120
  when: inventory_hostname == groups[group_name_master][0]

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Create crictl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link
  when: k3s_create_crictl_symlink | default(true) | bool

- name: Register node-token file access mode
  ansible.builtin.stat:
    path: /var/lib/rancher/k3s/server
  register: p
  when: k3s_create_crictl_symlink | default(true) | bool

- name: Change file access node-token
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/node-token
    mode: g+rx,o+rx
  become: true

- name: Read node-token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store Master node-token
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Get contents of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests
  ignore_errors: true

- name: Get sub dirs of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: Remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: Restore node-token file access
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Wait for nodes to join
  ansible.builtin.pause:
    seconds: 180
  when: inventory_hostname == groups[group_name_master][0]

- name: Verification
  when: not ansible_check_mode and inventory_hostname in groups[group_name_master]
  block:
    - name: Verify that all nodes actually joined
      ansible.builtin.command:
        cmd: "{{ k3s_kubectl_binary | default('k3s kubectl') }} get nodes -l 'node-role.kubernetes.io/control-plane=true' -o=jsonpath='{.items[*].metadata.name}'"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups[group_name_master] | length + groups['master'] | length)
      retries: "{{ retry_count | default(30) }}"
      delay: 60
      changed_when: false
  always:
    - name: Save logs of k3s-init.service
      ansible.builtin.include_tasks: fetch_k3s_init_logs.yml
      when: log_destination
      vars:
        log_destination: "{{ lookup('ansible.builtin.env', 'ANSIBLE_K3S_LOG_DIR', default=False) }}"
    - name: Kill the temporary service used for initialization
      ansible.builtin.systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: Debug k3s service logs
  ansible.builtin.command: journalctl -xeu k3s.service
  register: k3s_logs
  when: k3s_service_result is failed

- name: Display k3s service logs
  ansible.builtin.debug:
    var: k3s_logs.stdout_lines
  when: k3s_service_result is failed

- name: Fail if k3s service failed to start
  ansible.builtin.fail:
    msg: "K3s service failed to start"
  when: k3s_service_result is failed

- name: Create directory .kube
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: u=rwx,g=rx,o=

- name: Copy config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_user_dir }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    mode: u=rw,g=,o=

- name: Configure kubectl cluster to {{ endpoint_url }}
  ansible.builtin.command: >-
    {{ k3s_kubectl_binary | default('k3s kubectl') }} config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig {{ ansible_user_dir }}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{ apiserver_endpoint | ansible.utils.ipwrap }}:6443
# Deactivated linter rules:
#   - jinja[invalid]: As of version 6.6.0, ansible-lint complains that the input to ipwrap
#                     would be undefined. This will not be the case during playbook execution.
# noqa jinja[invalid]

- name: Create kubectl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link
  when: k3s_create_kubectl_symlink | default(true) | bool

- name: Capture k3s service logs
  ansible.builtin.command:
    cmd: journalctl -u k3s.service
  register: k3s_service_logs
  ignore_errors: true

- name: Save k3s service logs to file
  ansible.builtin.copy:
    content: "{{ k3s_service_logs.stdout }}"
    dest: "/tmp/k3s_service_logs_{{ inventory_hostname }}.log"
  when: k3s_service_logs is defined

- name: Fetch k3s service logs for analysis
  ansible.builtin.fetch:
    src: "/tmp/k3s_service_logs_{{ inventory_hostname }}.log"
    dest: "./logs/"
    flat: yes
  when: k3s_service_logs is defined


