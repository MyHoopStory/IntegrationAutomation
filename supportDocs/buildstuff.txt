To deploy:
- Gitlab
- Netbox
- ollama
- AWX
- Warehouse Management System / Inventory System

# AWX Integration Guide

## Overview
Using AWX in your project as an automation hub is a great approach for managing and monitoring Ansible playbooks through a web-based interface. Here's a detailed breakdown of the setup and implementation:

## 1. Setting Up AWX and Integrating It into Your Web App
### Installation & Setup
- Install AWX on a dedicated server or VM. As the open-source upstream project for Red Hat's Ansible Automation Platform, it provides a web-based UI for managing Ansible automation.
- AWX has a comprehensive REST API, allowing direct integration with your web app for triggering playbook runs, fetching job statuses, and monitoring progress.
- Configure user permissions to control which users or teams can manage and execute playbooks, enabling secure delegation of automation tasks.

## 2. Creating Projects for Customer Configurations
### Project Structure
- Define Projects in AWX as collections of playbooks sourced from Git repositories or AWX's internal SCM.
- Set up dedicated repositories for playbooks that configure network devices, vCenter, VMs, and other infrastructure.
- Each project in AWX can have specific inventories and variables, using separate YAML/JSON files per customer configuration containing IP addresses, VLANs, and other details.
- Create web app forms for users to upload/enter customer configuration details, saving to the repository AWX references.

## 3. Integrating AWX with Ansible Playbooks Using Custom Variables
### Resource Organization
- Organize customer devices (switches, VMs, PDUs, etc.) into inventory groups in AWX
- Map inventory groups based on web app configuration details
- Design playbooks to pull variables from AWX inventories for dynamic customer-specific execution
- Set up job templates for each configuration task (provisioning network devices, configuring VMs, deploying vCenter)

## 4. Running Playbooks and Monitoring Job Status
### Automation Control
- Use AWX API to trigger job templates directly from your web app
- Enable one-click deployments (e.g., "Deploy Network" triggers relevant playbooks)
- Access detailed job status and logging through API for web app display
- Configure notifications and webhook calls for job status updates (start, success, fail)

## 5. Example Workflow in AWX Integration
### Step-by-Step Process
1. User uploads configuration details (network IPs, VLANs, device types)
2. Web app creates/updates AWX project with configuration as inventory
3. App triggers specific job template (e.g., "Configure Network Devices")
4. System tracks progress via status updates and logs
5. Web app displays completion status and enables adjustments

## 6. Considerations for Scalability and Maintenance
### Version Control
- Store customer configurations in separate branches/folders
- Track changes and enable rollbacks
- Maintain versioned configuration files

### System Management
- Regular backups of AWX database and configuration repositories
- Implement recovery procedures for configurations
- Schedule automated inventory synchronization between Git and AWX

## Summary
This comprehensive setup enables AWX to serve as your central automation hub within the web app. The integration provides full control over automation processes through API integration, enabling easy triggering, monitoring, and reporting of job executions directly from the app interface. This approach ensures efficient deployments while maintaining proper tracking and application of all customer configurations.



Infrastructure MDocs
nav:
  - Infrastructure:
    - Overview: infrastructure/overview.md
    - Terraform:
      - VM Provisioning: infrastructure/terraform/vm-provisioning.md
      - Network Setup: infrastructure/terraform/network-setup.md
      - State Management: infrastructure/terraform/state.md
    - Networking:
      - Architecture: infrastructure/networking/architecture.md
      - VLAN Design: infrastructure/networking/vlans.md
      - Security Groups: infrastructure/networking/security.md
    - Storage:
      - PostgreSQL Clusters: infrastructure/storage/postgresql.md
      - Backup Strategy: infrastructure/storage/backup.md
    - Monitoring:
      - Stack Overview: infrastructure/monitoring/overview.md
      - Metrics Collection: infrastructure/monitoring/metrics.md
      - Alerting: infrastructure/monitoring/alerting.md
    - Security:
      - Access Control: infrastructure/security/access-control.md
      - Secret Management: infrastructure/security/secrets.md
      - Compliance: infrastructure/security/compliance.md

